trigger:
- master

stages:
- stage: NuGet
  displayName: Build NuGet
  jobs:
  - job: NuGet
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    # - task: UseDotNet@2 
    #   displayName: "Install .NET Core 3.1.x"
    #   inputs:
    #     version: '3.1.x'
    #     packageType: sdk
        
    # - task: DotNetCoreCLI@2
    #   displayName: Install dotnet-ef
    #   inputs:
    #     command: 'custom'
    #     custom: 'tool'
    #     arguments: 'install --global dotnet-ef --version 3.1.1 --ignore-failed-sources'
    # - task: UseDotNet@2
    #   displayName: 'Use .NET Core sdk'
    #   inputs:
    #     packageType: sdk
    #     version: 2.2.x
    #     installationPath: $(Agent.ToolsDirectory)/dotnet
    - task: replacetokens@3
      displayName: 'Replace tokens appsettings'
      inputs:
        rootDirectory: '$(System.DefaultWorkingDirectory)'
        targetFiles: '**/appsettings.*.json'
        encoding: 'auto'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: false
        enableTelemetry: false
    - task: DotNetCoreCLI@2
      displayName: 'Restore'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
        feedsToUse: 'select'
        vstsFeed: 'd73bd4e5-9a0c-45fc-ae19-1c2a40bfc9ee'
        verbosityRestore: 'Minimal'
    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        configuration: $(BuildConfiguration)
        arguments: '--no-restore'
    # - task: Bash@3
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       echo 'dir'
    #       dir
    # - task: CopyFiles@2
    #   inputs:
    #     SourceFolder: '$(System.DefaultWorkingDirectory)/src/NG.DBManager.Presentation.API/bin/'
    #     Contents: '**'
    #     TargetFolder: '$(Build.ArtifactStagingDirectory)/bin'
    - task: deployefcoremigrations@1
      displayName: 'Deploy EF Core migrations'
      inputs:
        migrationsDll: '$(Build.ArtifactStagingDirectory)/bin/Debug/netcoreapp3.1/NG.DBManager.Infrastructure.Contracts.dll'
        migrationsNamespace: NG.DBManager.Infrastructure.Contracts.Migrations
        startupDll: '$(Build.ArtifactStagingDirectory)/bin/Debug/netcoreapp3.1/NG.DBManager.Presentation.API.dll'
        depsJsonFile: '$(Build.ArtifactStagingDirectory)/bin/Debug/netcoreapp3.1/NG.DBManager.Presentation.API.deps.json'
        runtimeConfigFile: '$(Build.ArtifactStagingDirectory)/bin/Debug/netcoreapp3.1/NG.DBManager.Presentation.API.runtimeconfig.json'
        dbContextClassName: NgContext
    # - task: CopyFiles@2
    #   inputs:
    #     SourceFolder: '$(System.DefaultWorkingDirectory)/src/NG.DBManager.Infrastructure.Contracts/bin'
    #     Contents: '**'
    #     TargetFolder: '$(Build.ArtifactStagingDirectory)/bin'
    # - task: Bash@3
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       echo 'dir'
    #       dir
    # - task: efcore-migration-script-generator-task@0
    #   displayName: 'Generate Migration Scripts'
    #   inputs:
    #     projectpath: src/NG.DBManager.Infrastructure.Contracts
    #     databasecontexts: NgContext
    #     startupprojectpath: src/NG.DBManager.Presentation.API
    #     targetfolder: '$(build.artifactstagingdirectory)/migrations'
    #     installdependencies: true
    - powershell: |
        $branch = "$(Build.SourceBranchName)"
        if($branch -ne "master")
        {
            $workingDirectory = "$(System.DefaultWorkingDirectory)"
            $filePattern = "*AssemblyInfo*"
            $pattern = '^(?!//)(?=\[assembly: AssemblyVersion\("(.*)"\)\])'
            Get-ChildItem -Path $workingDirectory -Recurse -Filter $filePattern | ForEach-Object {
                $path = $_.FullName
                Write-Host $path
                (Get-Content $path) | ForEach-Object{
                    if($_ -match $pattern){
                        # We have found the matching line
                        # Edit the version number and put back.
                        $fileVersion = $matches[1]
                        $newVersion = "$fileVersion-beta"
                        '[assembly: AssemblyVersion("{0}")]{1}[assembly: AssemblyInformationalVersion("{2}")]' -f $fileVersion,"`r`n",$newVersion 
                    } else {
                        # Output line as is
                        $_
                    }
                } | Set-Content $path
            }
        }
      displayName: 'Add beta tag for non-master branches'
    - task: PublishSymbols@2
      displayName: 'Publish symbols path'
      inputs:
        symbolsFolder: '$(Build.SourcesDirectory)'
        searchPattern: '**/bin/**/*.pdb' 
        indexSources: true
        publishSymbols: true
        symbolServerType: teamServices
        detailedLog: true
        symbolsArtifactName: 'Symbols_$(BuildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: 'Nuget Pack'
      inputs:
        command: 'pack'
        packagesToPack: '**/*.csproj'
        packDirectory: '$(Build.ArtifactStagingDirectory)/nuget'
        nobuild: true
        includesymbols: true
        versioningScheme: 'off'          
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Pipeline Artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: publish

# - stage: API
#   displayName: Build API
#   jobs:
#   - job: API
#     pool:
#       vmImage: 'ubuntu-18.04'
#     steps:
#     - task: replacetokens@3
#       displayName: 'Replace tokens appsettings'
#       inputs:
#         rootDirectory: '$(System.DefaultWorkingDirectory)'
#         targetFiles: '**/appsettings.*.json'
#         encoding: 'auto'
#         writeBOM: true
#         actionOnMissing: 'warn'
#         keepToken: false
#         enableTelemetry: false

#     - task: replacetokens@3
#       displayName: 'Replace tokens docker-deploy.yml'
#       inputs:
#         rootDirectory: '$(System.DefaultWorkingDirectory)'
#         targetFiles: '**/docker-deploy.yml'
#         encoding: 'auto'
#         writeBOM: true
#         actionOnMissing: 'warn'
#         keepToken: false
#         enableTelemetry: false
#     - task: PublishBuildArtifacts@1
#       displayName: 'Publish docker-deploy.yml'
#       inputs:
#         PathtoPublish: 'docker-deploy.yml'
#         ArtifactName: 'drop'
#         publishLocation: 'Container'
#     - task: Docker@2
#       displayName: 'Restore, Build & UnitTest'
#       inputs:
#         containerRegistry: 'GitLabRegistry/ferranramirez'
#         repository: 'notguiri/$(projectName)'
#         command: 'build'
#         Dockerfile: '**/Dockerfile'
#         tags: '$(Build.SourceBranchName)'
#         arguments: '--build-arg PAT=$(PAT)'
#         addPipelineData: false

#     - task: Bash@3
#       displayName: 'Copy TestResults out of Docker'
#       inputs:
#         targetType: 'inline'
#         script: |
#           docker create -ti --name testcontainer registry.gitlab.com/notguiri/$(projectName):$(Build.SourceBranchName)
#           docker cp testcontainer:/publish/test $(Build.ArtifactStagingDirectory)/TestResults
#           docker rm -fv testcontainer

#     - task: PublishTestResults@2
#       displayName: 'Publish TestResults'
#       inputs:
#         testResultsFormat: 'VSTest'
#         testResultsFiles: 'result.trx'
#         searchFolder: '$(Build.ArtifactStagingDirectory)/TestResults'
#     - task: Docker@2
#       displayName: 'Docker Push'
#       inputs:
#         containerRegistry: 'GitLabRegistry/ferranramirez'
#         repository: 'notguiri/$(projectName)'
#         command: 'push'
#         tags: '$(Build.SourceBranchName)'
#         addPipelineData: false