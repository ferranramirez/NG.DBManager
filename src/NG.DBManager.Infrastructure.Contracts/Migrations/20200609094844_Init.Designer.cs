// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NG.DBManager.Infrastructure.Contracts.Contexts;

namespace NG.DBManager.Infrastructure.Contracts.Migrations
{
    [DbContext(typeof(NgContext))]
    [Migration("20200609094844_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NG.DBManager.Infrastructure.Contracts.Models.Audio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("Audio");
                });

            modelBuilder.Entity("NG.DBManager.Infrastructure.Contracts.Models.Commerce", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Commerce");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a4506bf8-9cca-4413-b0d4-4247c61b1231"),
                            LocationId = new Guid("0013a98e-32f6-494d-b055-c9fb4dafc3e8"),
                            Name = "Test Commerce",
                            UserId = new Guid("73b7b257-41f7-4b22-9a10-93fb91238fd9")
                        });
                });

            modelBuilder.Entity("NG.DBManager.Infrastructure.Contracts.Models.Coupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommerceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("GenerationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ValidationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CommerceId");

                    b.HasIndex("UserId");

                    b.ToTable("Coupon");
                });

            modelBuilder.Entity("NG.DBManager.Infrastructure.Contracts.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("NodeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("NG.DBManager.Infrastructure.Contracts.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Latitude", "Longitude")
                        .IsUnique();

                    b.ToTable("Location");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0013a98e-32f6-494d-b055-c9fb4dafc3e8"),
                            Latitude = 33.842185m,
                            Longitude = -40.707753m,
                            Name = "Test Location"
                        });
                });

            modelBuilder.Entity("NG.DBManager.Infrastructure.Contracts.Models.Node", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoordinatesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("TourId");

                    b.ToTable("Node");
                });

            modelBuilder.Entity("NG.DBManager.Infrastructure.Contracts.Models.Restaurant", b =>
                {
                    b.Property<Guid>("CommerceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CommerceId");

                    b.ToTable("Restaurant");
                });

            modelBuilder.Entity("NG.DBManager.Infrastructure.Contracts.Models.Review", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TourId");

                    b.HasIndex("TourId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("NG.DBManager.Infrastructure.Contracts.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("NG.DBManager.Infrastructure.Contracts.Models.Tour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("GeoJson")
                        .HasColumnType("text");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Tour");
                });

            modelBuilder.Entity("NG.DBManager.Infrastructure.Contracts.Models.TourTag", b =>
                {
                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TourId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TourTag");
                });

            modelBuilder.Entity("NG.DBManager.Infrastructure.Contracts.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(254)");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ImageId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0f2451e-5820-4eca-a797-46a01693a3b2"),
                            Birthdate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "basic@test.org",
                            Name = "Basic",
                            Password = "10000.+2PnZrnAWQRgqlMx+l8kyA==.ALiUC3pHYJJ7cr8Xqnn1y16XROosvjHNTDmf+Em+pMM=",
                            PhoneNumber = "+222222222",
                            Role = 2,
                            Surname = "QA User"
                        },
                        new
                        {
                            Id = new Guid("0ac2c4c5-ebff-445e-85d4-1db76d65ce0a"),
                            Birthdate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@test.org",
                            Name = "Admin",
                            Password = "10000.r1m2AhgohtRKaAYihSdiFQ==.9jOF0O4zo3WoBYq+H1f3XTPG9An8LZfEJd1uwB66N0s=",
                            PhoneNumber = "+000000000",
                            Role = 0,
                            Surname = "QA User"
                        },
                        new
                        {
                            Id = new Guid("440edb6b-342e-4d5f-a233-62aef964cbfa"),
                            Birthdate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "commerce@test.org",
                            Name = "Commerce",
                            Password = "10000.NcEE328o58z2KLy1cIiKMA==.5+Mwrqw7XVP2dE+RtcMorXI/Ri6daF4nCRZB4+xJUAY=",
                            PhoneNumber = "+111111111",
                            Role = 1,
                            Surname = "QA User"
                        },
                        new
                        {
                            Id = new Guid("73b7b257-41f7-4b22-9a10-93fb91238fd9"),
                            Birthdate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fullcommerce@test.org",
                            Name = "FullCommerce",
                            Password = "10000./LphyV3IUSMjgcllhGg/HA==.ZeBKs4MVq3+BKEQw9ejzr/HbAwI7/KOGr10FqkuGSmE=",
                            PhoneNumber = "+0111111111",
                            Role = 1,
                            Surname = "QA User"
                        });
                });

            modelBuilder.Entity("NG.DBManager.Infrastructure.Contracts.Models.Audio", b =>
                {
                    b.HasOne("NG.DBManager.Infrastructure.Contracts.Models.Node", null)
                        .WithMany("Audios")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NG.DBManager.Infrastructure.Contracts.Models.Commerce", b =>
                {
                    b.HasOne("NG.DBManager.Infrastructure.Contracts.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NG.DBManager.Infrastructure.Contracts.Models.User", "User")
                        .WithOne("Commerce")
                        .HasForeignKey("NG.DBManager.Infrastructure.Contracts.Models.Commerce", "UserId");
                });

            modelBuilder.Entity("NG.DBManager.Infrastructure.Contracts.Models.Coupon", b =>
                {
                    b.HasOne("NG.DBManager.Infrastructure.Contracts.Models.Commerce", "Commerce")
                        .WithMany()
                        .HasForeignKey("CommerceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NG.DBManager.Infrastructure.Contracts.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NG.DBManager.Infrastructure.Contracts.Models.Image", b =>
                {
                    b.HasOne("NG.DBManager.Infrastructure.Contracts.Models.Node", null)
                        .WithMany("Images")
                        .HasForeignKey("NodeId");
                });

            modelBuilder.Entity("NG.DBManager.Infrastructure.Contracts.Models.Node", b =>
                {
                    b.HasOne("NG.DBManager.Infrastructure.Contracts.Models.Location", "Location")
                        .WithMany("Nodes")
                        .HasForeignKey("LocationId");

                    b.HasOne("NG.DBManager.Infrastructure.Contracts.Models.Tour", null)
                        .WithMany("Nodes")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NG.DBManager.Infrastructure.Contracts.Models.Restaurant", b =>
                {
                    b.HasOne("NG.DBManager.Infrastructure.Contracts.Models.Commerce", "Commerce")
                        .WithMany()
                        .HasForeignKey("CommerceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NG.DBManager.Infrastructure.Contracts.Models.Review", b =>
                {
                    b.HasOne("NG.DBManager.Infrastructure.Contracts.Models.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NG.DBManager.Infrastructure.Contracts.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NG.DBManager.Infrastructure.Contracts.Models.TourTag", b =>
                {
                    b.HasOne("NG.DBManager.Infrastructure.Contracts.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NG.DBManager.Infrastructure.Contracts.Models.Tour", "Tour")
                        .WithMany("TourTags")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NG.DBManager.Infrastructure.Contracts.Models.User", b =>
                {
                    b.HasOne("NG.DBManager.Infrastructure.Contracts.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");
                });
#pragma warning restore 612, 618
        }
    }
}
